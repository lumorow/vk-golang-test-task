// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "filmlib/server/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockRepository) CreateActor(actor entity.Actor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockRepositoryMockRecorder) CreateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockRepository)(nil).CreateActor), actor)
}

// CreateFilm mocks base method.
func (m *MockRepository) CreateFilm(film entity.Film) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", film)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockRepositoryMockRecorder) CreateFilm(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockRepository)(nil).CreateFilm), film)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), user)
}

// DeleteActorById mocks base method.
func (m *MockRepository) DeleteActorById(actorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorById", actorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorById indicates an expected call of DeleteActorById.
func (mr *MockRepositoryMockRecorder) DeleteActorById(actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorById", reflect.TypeOf((*MockRepository)(nil).DeleteActorById), actorId)
}

// DeleteFilmById mocks base method.
func (m *MockRepository) DeleteFilmById(filmId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmById", filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilmById indicates an expected call of DeleteFilmById.
func (mr *MockRepositoryMockRecorder) DeleteFilmById(filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmById", reflect.TypeOf((*MockRepository)(nil).DeleteFilmById), filmId)
}

// GetActor mocks base method.
func (m *MockRepository) GetActor(actorId int) (entity.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", actorId)
	ret0, _ := ret[0].(entity.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockRepositoryMockRecorder) GetActor(actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockRepository)(nil).GetActor), actorId)
}

// GetActorsIdByFilmId mocks base method.
func (m *MockRepository) GetActorsIdByFilmId(filmId int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsIdByFilmId", filmId)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsIdByFilmId indicates an expected call of GetActorsIdByFilmId.
func (mr *MockRepositoryMockRecorder) GetActorsIdByFilmId(filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsIdByFilmId", reflect.TypeOf((*MockRepository)(nil).GetActorsIdByFilmId), filmId)
}

// GetFilmsByActorId mocks base method.
func (m *MockRepository) GetFilmsByActorId(actorId int) ([]entity.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByActorId", actorId)
	ret0, _ := ret[0].([]entity.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsByActorId indicates an expected call of GetFilmsByActorId.
func (mr *MockRepositoryMockRecorder) GetFilmsByActorId(actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByActorId", reflect.TypeOf((*MockRepository)(nil).GetFilmsByActorId), actorId)
}

// GetFilmsWithFragment mocks base method.
func (m *MockRepository) GetFilmsWithFragment(actorNameFrag, filmNameFrag string) ([]entity.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsWithFragment", actorNameFrag, filmNameFrag)
	ret0, _ := ret[0].([]entity.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsWithFragment indicates an expected call of GetFilmsWithFragment.
func (mr *MockRepositoryMockRecorder) GetFilmsWithFragment(actorNameFrag, filmNameFrag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsWithFragment", reflect.TypeOf((*MockRepository)(nil).GetFilmsWithFragment), actorNameFrag, filmNameFrag)
}

// GetFilmsWithSort mocks base method.
func (m *MockRepository) GetFilmsWithSort(sortType string, filmsId []int) ([]entity.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsWithSort", sortType, filmsId)
	ret0, _ := ret[0].([]entity.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsWithSort indicates an expected call of GetFilmsWithSort.
func (mr *MockRepositoryMockRecorder) GetFilmsWithSort(sortType, filmsId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsWithSort", reflect.TypeOf((*MockRepository)(nil).GetFilmsWithSort), sortType, filmsId)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(username, password string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username, password)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), username, password)
}

// UpdateActorById mocks base method.
func (m *MockRepository) UpdateActorById(actorId int, actor entity.UpdateActorInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActorById", actorId, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActorById indicates an expected call of UpdateActorById.
func (mr *MockRepositoryMockRecorder) UpdateActorById(actorId, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActorById", reflect.TypeOf((*MockRepository)(nil).UpdateActorById), actorId, actor)
}

// UpdateFilmById mocks base method.
func (m *MockRepository) UpdateFilmById(filmId int, deleteIds, addIds []int, film entity.UpdateFilmInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmById", filmId, deleteIds, addIds, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmById indicates an expected call of UpdateFilmById.
func (mr *MockRepositoryMockRecorder) UpdateFilmById(filmId, deleteIds, addIds, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmById", reflect.TypeOf((*MockRepository)(nil).UpdateFilmById), filmId, deleteIds, addIds, film)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "filmlib/server/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockService) CreateActor(actor entity.Actor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockServiceMockRecorder) CreateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockService)(nil).CreateActor), actor)
}

// CreateFilm mocks base method.
func (m *MockService) CreateFilm(film entity.Film) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", film)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockServiceMockRecorder) CreateFilm(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockService)(nil).CreateFilm), film)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), user)
}

// DeleteActorById mocks base method.
func (m *MockService) DeleteActorById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorById indicates an expected call of DeleteActorById.
func (mr *MockServiceMockRecorder) DeleteActorById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorById", reflect.TypeOf((*MockService)(nil).DeleteActorById), id)
}

// DeleteFilmById mocks base method.
func (m *MockService) DeleteFilmById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilmById indicates an expected call of DeleteFilmById.
func (mr *MockServiceMockRecorder) DeleteFilmById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmById", reflect.TypeOf((*MockService)(nil).DeleteFilmById), id)
}

// GenerateToken mocks base method.
func (m *MockService) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockServiceMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockService)(nil).GenerateToken), username, password)
}

// GetActorsWithFilms mocks base method.
func (m *MockService) GetActorsWithFilms(actorsId []int) ([]entity.ActorFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsWithFilms", actorsId)
	ret0, _ := ret[0].([]entity.ActorFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsWithFilms indicates an expected call of GetActorsWithFilms.
func (mr *MockServiceMockRecorder) GetActorsWithFilms(actorsId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsWithFilms", reflect.TypeOf((*MockService)(nil).GetActorsWithFilms), actorsId)
}

// GetFilmWithFragment mocks base method.
func (m *MockService) GetFilmWithFragment(actorNameFrag, filmNameFrag string) ([]entity.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmWithFragment", actorNameFrag, filmNameFrag)
	ret0, _ := ret[0].([]entity.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmWithFragment indicates an expected call of GetFilmWithFragment.
func (mr *MockServiceMockRecorder) GetFilmWithFragment(actorNameFrag, filmNameFrag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmWithFragment", reflect.TypeOf((*MockService)(nil).GetFilmWithFragment), actorNameFrag, filmNameFrag)
}

// GetFilmsWithSort mocks base method.
func (m *MockService) GetFilmsWithSort(sortType string, filmsId []int) ([]entity.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsWithSort", sortType, filmsId)
	ret0, _ := ret[0].([]entity.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsWithSort indicates an expected call of GetFilmsWithSort.
func (mr *MockServiceMockRecorder) GetFilmsWithSort(sortType, filmsId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsWithSort", reflect.TypeOf((*MockService)(nil).GetFilmsWithSort), sortType, filmsId)
}

// ParseToken mocks base method.
func (m *MockService) ParseToken(accessToken string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockServiceMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockService)(nil).ParseToken), accessToken)
}

// UpdateActorById mocks base method.
func (m *MockService) UpdateActorById(id int, actor entity.UpdateActorInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActorById", id, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActorById indicates an expected call of UpdateActorById.
func (mr *MockServiceMockRecorder) UpdateActorById(id, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActorById", reflect.TypeOf((*MockService)(nil).UpdateActorById), id, actor)
}

// UpdateFilmById mocks base method.
func (m *MockService) UpdateFilmById(id int, film entity.UpdateFilmInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmById", id, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmById indicates an expected call of UpdateFilmById.
func (mr *MockServiceMockRecorder) UpdateFilmById(id, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmById", reflect.TypeOf((*MockService)(nil).UpdateFilmById), id, film)
}

package handler

import (
	"filmlib/server/internal/service"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	_ "github.com/swaggo/http-swagger/example/go-chi/docs" // docs is generated by Swag CLI, you have to import it.
	httpSwagger "github.com/swaggo/http-swagger/v2"
	"net/http"
)

type Handler struct {
	services *service.Service
}

func NewHandler(services *service.Service) *Handler {
	return &Handler{services: services}
}

func (h *Handler) InitRoutes() *chi.Mux {
	router := chi.NewRouter()

	router.Use(middleware.RequestID)
	router.Use(middleware.RealIP)
	router.Use(middleware.Logger)
	router.Use(middleware.Recoverer)

	router.HandleFunc("/swagger", func(w http.ResponseWriter, r *http.Request) {
		http.Redirect(w, r, r.RequestURI+"/", http.StatusMovedPermanently)
	})

	router.Route("/auth", func(r chi.Router) {
		// Sign-up
		// POST /auth/sign-up
		r.Post("/sign-up", h.signUp)
		// Sign-in
		// POST /auth/sign-in
		r.Post("/sign-in", h.signIn)
	})

	router.Route("/api", func(r chi.Router) {
		r.Use(userIdentity(h))
		r.Route("/actor", func(r chi.Router) {
			// Create actor
			// POST /actor
			r.Post("/", h.CreateActor)

			r.Route("/{actorID}", func(r chi.Router) {
				// Delete actor
				// DELETE /actor/{id}
				r.Delete("/", h.DeleteActorById)
				// Patch actor
				// PATCH /actor/{id}
				r.Patch("/", h.UpdateActorById)
			})
		})

		r.Route("/actors", func(r chi.Router) {
			// Get actors with films
			// GET /actors/{ids}
			r.Get("/{?(id=[0-9]+&)*id=[0-9]+$}", h.GetActors)
		})

		r.Route("/film", func(r chi.Router) {
			// Create film
			// POST /film
			r.Post("/", h.CreateFilm)

			r.Route("/{filmID}", func(r chi.Router) {
				// Delete film
				// DELETE /film/{id}
				r.Delete("/", h.DeleteFilmById)
				// Patch film
				// PATCH /film/{id}
				r.Patch("/", h.UpdateFilmById)
			})
		})
		r.Route("/films", func(r chi.Router) {
			// Get films with sort param
			// DELETE /films/{id}
			r.Get("//{?(id=[0-9]+&)*id=[0-9]+$}", h.GetFilmsWithSort)
			// Get films with film name fragment and actor name fragment
			// GET /films/{filmNameFr=&actorNameFr=}
			r.Get("{/?filmNameFr=[a-zA-Z0-9]+&actorNameFr=[a-zA-Z0-9]+$}", h.GetFilmWithFragment)
		})

		r.Get("/swagger*", httpSwagger.Handler())
	})

	return router
}
